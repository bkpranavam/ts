using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using System.IO;
using System.Linq;

public byte[] ExportToExcel(IQueryable data)
{
    byte[] result;

    using (MemoryStream memoryStream = new MemoryStream())
    {
        using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(memoryStream, SpreadsheetDocumentType.Workbook))
        {
            WorkbookPart workbookPart = spreadsheetDocument.AddWorkbookPart();
            workbookPart.Workbook = new Workbook();

            WorksheetPart worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
            worksheetPart.Worksheet = new Worksheet(new SheetData());

            Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook.AppendChild<Sheets>(new Sheets());
            Sheet sheet = new Sheet() { Id = spreadsheetDocument.WorkbookPart.GetIdOfPart(worksheetPart), SheetId = 1, Name = "Sheet1" };
            sheets.Append(sheet);

            SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();
            Row headerRow = new Row();
            int columnIndex = 1;

            foreach (var property in data.ElementType.GetProperties())
            {
                headerRow.AppendChild(new Cell() { DataType = CellValues.String, CellValue = new CellValue(property.Name), CellReference = GetCellReference(columnIndex, 1) });
                columnIndex++;
            }

            sheetData.AppendChild(headerRow);

            foreach (var item in data)
            {
                Row dataRow = new Row();
                columnIndex = 1;

                foreach (var property in data.ElementType.GetProperties())
                {
                    dataRow.AppendChild(new Cell() { DataType = CellValues.String, CellValue = new CellValue(property.GetValue(item)?.ToString()), CellReference = GetCellReference(columnIndex, sheetData.ChildElements.Count + 1) });
                    columnIndex++;
                }

                sheetData.AppendChild(dataRow);
            }
        }

        result = memoryStream.ToArray();
    }

    return result;
}

private string GetCellReference(int columnIndex, int rowIndex)
{
    string columnLetter = GetColumnLetter(columnIndex);

    return columnLetter + rowIndex.ToString();
}

private string GetColumnLetter(int columnIndex)
{
    int dividend = columnIndex;
    string columnLetter = String.Empty;

    while (dividend > 0)
    {
        int modulo = (dividend - 1) % 26;
        columnLetter = Convert.ToChar(65 + modulo).ToString() + columnLetter;
        dividend = (int)((dividend - modulo) / 26);
    }

    return columnLetter;
}



@page "/"

<button @onclick="ExportData">Export Data</button>

@code {
    private IQueryable data = GetData();

    private void ExportData()
    {
        byte[] exportedData = ExportToExcel(data);

        string fileName = "data.xlsx";

        HttpResponse response = NavigationManager.NavigateTo("/_blazor/download/" + fileName, true);

        response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        response.Headers.Add
response.Headers.Add("Content-Disposition", "attachment; filename=" + fileName);
        response.Body.WriteAsync(exportedData);
    }

    private static IQueryable GetData()
    {
        // Code to get data from the database or another source.
    }
}


private async Task ExportData()
{
    byte[] exportedData = ExportToExcel(data);

    string fileName = "data.xlsx";

    var response = new HttpResponseMessage(HttpStatusCode.OK);
    response.Content = new ByteArrayContent(exportedData);
    response.Content.Headers.ContentDisposition = new ContentDispositionHeaderValue("attachment");
    response.Content.Headers.ContentDisposition.FileName = fileName;
    response.Content.Headers.ContentType = new MediaTypeHeaderValue("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");

    await jsRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, Convert.ToBase64String(exportedData));
}
window.BlazorDownloadFile = function (fileName, data) {
    var link = document.createElement('a');
    link.download = fileName;
    link.href = "data:application/octet-stream;base64," + data;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
